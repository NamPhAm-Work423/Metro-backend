# nginx/nginx.conf
worker_processes auto;

events {
    worker_connections 4096;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    ########################################################################
    # Global hardening & performance                                      #
    ########################################################################
    server_tokens off;

    # Logging (JSON for easier ingestion). Rotate via OS logrotate.
    log_format json escape=json '{"time":"$time_iso8601","remote_addr":"$remote_addr","request":"$request","status":$status,"body_bytes_sent":$body_bytes_sent,"request_time":$request_time,"upstream_response_time":"$upstream_response_time","method":"$request_method","uri":"$request_uri","host":"$host","user_agent":"$http_user_agent"}';
    access_log /var/log/nginx/access.log json;
    error_log  /var/log/nginx/error.log warn;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;

    # Client/body limits
    client_max_body_size 10m;

    # Compression (APIs: JSON, JS, CSS, XML)
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 1024;
    gzip_vary on;
    gzip_proxied any;
    gzip_types application/json application/javascript text/css text/plain application/xml application/x-javascript;

    # Connection limits (concurrent)
    limit_conn_zone $binary_remote_addr zone=addr_limit:10m;

    # Rate limiting (requests/second per-IP)
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # WebSocket upgrade mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream to API Gateway (Docker DNS name)
    upstream api_gateway {
        server api-gateway:8000;
        keepalive 64;
    }

    ########################################################################
    # HTTP -> HTTPS redirect                                                #
    ########################################################################
    server {
        listen 80;
        server_name localhost metrohcm.io.vn; # replace with your domain
        return 301 https://$host$request_uri;
    }

    ########################################################################
    # HTTPS Server                                                          #
    ########################################################################
    server {
        listen 443 ssl http2;
        server_name localhost metrohcm.io.vn; # replace with your domain

        # TLS configuration (replace certs with real ones on VPS)
        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;

        # TLS session & OCSP stapling (requires a publicly trusted cert)
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 1.1.1.1 1.0.0.1 valid=300s ipv6=off;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy no-referrer always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # API routes - proxy to API Gateway
        location /api/ {
            # Per-IP protections
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn addr_limit 50;

            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_cache_bypass $http_upgrade;

            # Buffering & timeouts (tune if you have large payloads)
            proxy_buffering on;
            proxy_buffers 16 16k;
            proxy_buffer_size 16k;
            proxy_busy_buffers_size 24k;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://api_gateway/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files (if any)
        location /static/ {
            root /var/www;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Default location
        location / {
            return 404;
        }
    }
}