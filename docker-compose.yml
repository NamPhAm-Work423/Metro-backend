version: '3.8'

services:
  # API Gateway - Main entry point
  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispass123
      - JWT_ACCESS_SECRET=your_access_secret_key
      - JWT_REFRESH_SECRET=your_refresh_secret_key
    volumes:
      - ./api-gateway:/app
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--requirepass", "redispass123"]

  # MailHog for email testing
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   ports:
  #     - "1025:1025"  # SMTP server
  #     - "8025:8025"  # Web UI
  #   networks:
  #     - backend-network
  #   restart: unless-stopped

  # Redis Commander (Optional - for Redis management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redispass123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - backend-network

  # pgAdmin (Optional - for PostgreSQL management UI)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - backend-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Networks
networks:
  backend-network:
    driver: bridge 