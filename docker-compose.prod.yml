x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-restart: &default-restart
  restart: unless-stopped

x-deploy: &default-deploy
  deploy:
    resources:
      limits:
        cpus: '0.5'
        memory: 512M
      reservations:
        cpus: '0.25'
        memory: 256M

services:
  # Public entry
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /opt/metro/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /opt/metro/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart
    profiles:
      - nginx

  # Microservices (use images from GHCR, env from ../env)
  api-gateway:
    image: ${REGISTRY}/metro-api-gateway:${IMAGE_TAG}
    container_name: api-gateway
    env_file:
      - /opt/env/api-gateway.env
    expose:
      - "8000"
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy

  auth-service:
    image: ${REGISTRY}/metro-auth-service:${IMAGE_TAG}
    container_name: auth-service
    env_file:
      - /opt/env/auth-service.env
    expose:
      - "8001"
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy

  user-service:
    image: ${REGISTRY}/metro-user-service:${IMAGE_TAG}
    container_name: user-service
    env_file:
      - /opt/env/user-service.env
    expose:
      - "8002"
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy
    volumes:
      - /opt/metro/libs:/libs:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  transport-service:
    image: ${REGISTRY}/metro-transport-service:${IMAGE_TAG}
    container_name: transport-service
    env_file:
      - /opt/env/transport-service.env
    expose:
      - "8003"
      - "50051"
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ticket-service:
    image: ${REGISTRY}/metro-ticket-service:${IMAGE_TAG}
    container_name: ticket-service
    env_file:
      - /opt/env/ticket-service.env
    expose:
      - "8004"
      - "50052"
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy
    volumes:
      - /opt/metro/libs:/libs:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  public-service:
    image: ${REGISTRY}/metro-public-service:${IMAGE_TAG}
    container_name: public-service
    env_file:
      - /opt/env/public-service.env
    expose:
      - "8005"
    depends_on:
      transport-service:
        condition: service_healthy
      ticket-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  payment-service:
    image: ${REGISTRY}/metro-payment-service:${IMAGE_TAG}
    container_name: payment-service
    env_file:
      - /opt/env/payment-service.env
    expose:
      - "8006"
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  report-service:
    image: ${REGISTRY}/metro-report-service:${IMAGE_TAG}
    container_name: report-service
    env_file:
      - /opt/env/report-service.env
    expose:
      - "8007"
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart
    healthcheck:
      test: ["CMD", "python", "-c", "import os,urllib.request; port=os.getenv('PORT','8007'); urllib.request.urlopen(f'http://localhost:{port}/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  control-service:
    image: ${REGISTRY}/metro-control-service:${IMAGE_TAG}
    container_name: control-service
    env_file:
      - /opt/env/control-service.env
    expose:
      - "8008"
      - "50053"
    depends_on:
      transport-service:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy
    healthcheck:
      test: ["CMD", "python", "-c", "import os,urllib.request; port=os.getenv('PORT','8008'); urllib.request.urlopen(f'http://localhost:{port}/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  management-service:
    image: ${REGISTRY}/metro-management-service:${IMAGE_TAG}
    container_name: management-service
    env_file:
      - /opt/env/management-service.env
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    networks:
      - backend-network
    logging: *default-logging
    <<:
      - *default-restart
      - *default-deploy
    healthcheck:
      test: ["CMD", "python", "-c", "import os,urllib.request; port=os.getenv('PORT','3001'); urllib.request.urlopen(f'http://localhost:{port}/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Infra (internal-only)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    env_file:
      - /opt/env/init_db.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /opt/metro/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh:ro
      # - /opt/metro/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--requirepass", "redispass123"]
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_INIT_LIMIT: 10
    expose:
      - "2181"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  kafka-1:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-1
    expose:
      - "9092"
      - "19092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19092
      KAFKA_HEAP_OPTS: "-Xms256M -Xmx256M"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: "60000"
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: "60000"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:19092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  kafka-2:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-2
    expose:
      - "9093"
      - "19093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:19093", "--list"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  kafka-3:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-3
    expose:
      - "9094"
      - "19094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:19094
      KAFKA_HEAP_OPTS: "-Xms256M -Xmx256M"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: "60000"
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: "60000"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:19094", "--list"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
          
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - /opt/metro/management-service/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /opt/metro/management-service/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - /opt/metro/management-service/prometheus/services.json:/etc/prometheus/services.json:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart
    depends_on:
      api-gateway:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      transport-service:
        condition: service_healthy
      ticket-service:
        condition: service_healthy
      public-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      report-service:
        condition: service_healthy
      management-service:
        condition: service_healthy

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - /opt/metro/management-service/prometheus/alertmanger.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "9093:9093"
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart
    depends_on:
      - prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - /opt/metro/dashboard/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - /opt/metro/dashboard/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - /opt/metro/dashboard/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redispass123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - backend-network
    logging: *default-logging
    <<: *default-restart

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    networks:
      - backend-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json:ro


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
    
networks:
  backend-network:
    driver: bridge