const { Train } = require('../models/index.model');
const trainsData = [
  // T√†u cho Tuy·∫øn Metro s·ªë 1 (ƒë√£ v·∫≠n h√†nh)
  {
    name: 'Metro-01-001',
    type: 'standard',
    capacity: 930, // 930 h√†nh kh√°ch (6 toa)
    status: 'active',
    lastMaintenance: new Date('2024-12-01')
  },
  {
    name: 'Metro-01-002',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-02')
  },
  {
    name: 'Metro-01-003',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-03')
  },
  {
    name: 'Metro-01-004',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-04')
  },
  {
    name: 'Metro-01-005',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-05')
  },
  {
    name: 'Metro-01-006',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-06')
  },
  {
    name: 'Metro-01-007',
    type: 'standard',
    capacity: 930,
    status: 'maintenance',
    lastMaintenance: new Date('2024-12-07')
  },
  {
    name: 'Metro-01-008',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-08')
  },
  {
    name: 'Metro-01-009',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-09')
  },
  {
    name: 'Metro-01-010',
    type: 'standard',
    capacity: 930,
    status: 'active',
    lastMaintenance: new Date('2024-12-10')
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 2 (ƒëang chu·∫©n b·ªã)
  {
    name: 'Metro-02-001',
    type: 'express',
    capacity: 1200, // T√†u l·ªõn h∆°n cho tuy·∫øn d√†i
    status: 'active', // Ch∆∞a ƒë∆∞a v√†o v·∫≠n h√†nh
    lastMaintenance: null
  },
  {
    name: 'Metro-02-002',
    type: 'express',
    capacity: 1200,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-02-003',
    type: 'express',
    capacity: 1200,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-02-004',
    type: 'express',
    capacity: 1200,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-02-005',
    type: 'express',
    capacity: 1200,
    status: 'active',
    lastMaintenance: null
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 3A
  {
    name: 'Metro-3A-001',
    type: 'standard',
    capacity: 800,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-3A-002',
    type: 'standard',
    capacity: 800,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-3A-003',
    type: 'standard',
    capacity: 800,
    status: 'active',
    lastMaintenance: null
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 3B (k·∫øt n·ªëi s√¢n bay)
  {
    name: 'Metro-3B-001',
    type: 'express',
    capacity: 600, // T√†u nh·ªè h∆°n cho tuy·∫øn ng·∫Øn nh∆∞ng nhanh
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-3B-002',
    type: 'express',
    capacity: 600,
    status: 'active',
    lastMaintenance: null
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 4 (tuy·∫øn d√†i nh·∫•t)
  {
    name: 'Metro-04-001',
    type: 'express',
    capacity: 1400, // T√†u l·ªõn nh·∫•t cho tuy·∫øn d√†i nh·∫•t
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-04-002',
    type: 'express',
    capacity: 1400,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-04-003',
    type: 'express',
    capacity: 1400,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-04-004',
    type: 'express',
    capacity: 1400,
    status: 'active',
    lastMaintenance: null
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 4B (tuy·∫øn ng·∫Øn k·∫øt n·ªëi s√¢n bay)
  {
    name: 'Metro-4B-001',
    type: 'standard',
    capacity: 400,
    status: 'active',
    lastMaintenance: null
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 5
  {
    name: 'Metro-05-001',
    type: 'standard',
    capacity: 1000,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-05-002',
    type: 'standard',
    capacity: 1000,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-05-003',
    type: 'standard',
    capacity: 1000,
    status: 'active',
    lastMaintenance: null
  },

  // T√†u cho Tuy·∫øn Metro s·ªë 6 (to√†n ng·∫ßm)
  {
    name: 'Metro-06-001',
    type: 'standard',
    capacity: 700,
    status: 'active',
    lastMaintenance: null
  },
  {
    name: 'Metro-06-002',
    type: 'standard',
    capacity: 700,
    status: 'active',
    lastMaintenance: null
  }
];

const seedTrains = async () => {
  try {
    console.log('üöÑ B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu t√†u Metro TPHCM...');
    
    // X√≥a d·ªØ li·ªáu c≈©
    await Train.destroy({ where: {} });
    
    // T·∫°o trains
    const trains = await Train.bulkCreate(trainsData);
    
    console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ${trains.length} t√†u Metro TPHCM`);
    
    // Th·ªëng k√™ theo tr·∫°ng th√°i
    const activeTrains = trains.filter(train => train.status === 'active');
    const maintenanceTrains = trains.filter(train => train.status === 'maintenance');
    const outOfServiceTrains = trains.filter(train => train.status === 'active');
    
    console.log('\nüìä Th·ªëng k√™ t√†u theo tr·∫°ng th√°i:');
    console.log(`   üü¢ ƒêang ho·∫°t ƒë·ªông: ${activeTrains.length} t√†u`);
    console.log(`   üü° ƒêang b·∫£o tr√¨: ${maintenanceTrains.length} t√†u`);
    console.log(`   üî¥ Ch∆∞a v·∫≠n h√†nh: ${outOfServiceTrains.length} t√†u`);
    
    // Th·ªëng k√™ theo lo·∫°i t√†u
    const standardTrains = trains.filter(train => train.type === 'standard');
    const expressTrains = trains.filter(train => train.type === 'express');
    
    console.log('\nüöá Th·ªëng k√™ t√†u theo lo·∫°i:');
    console.log(`   üöä T√†u ti√™u chu·∫©n: ${standardTrains.length} t√†u`);
    console.log(`   üöÖ T√†u t·ªëc h√†nh: ${expressTrains.length} t√†u`);
    
    // Hi·ªÉn th·ªã t√†u ƒëang ho·∫°t ƒë·ªông (Tuy·∫øn s·ªë 1)
    console.log('\nüü¢ T√†u ƒëang ho·∫°t ƒë·ªông (Tuy·∫øn Metro s·ªë 1):');
    activeTrains.forEach((train, index) => {
      console.log(`   ${index + 1}. ${train.name} - S·ª©c ch·ª©a: ${train.capacity} h√†nh kh√°ch`);
    });
    
    if (maintenanceTrains.length > 0) {
      console.log('\nüü° T√†u ƒëang b·∫£o tr√¨:');
      maintenanceTrains.forEach((train, index) => {
        console.log(`   ${index + 1}. ${train.name} - S·ª©c ch·ª©a: ${train.capacity} h√†nh kh√°ch`);
      });
    }
    
    return trains;
  } catch (error) {
    console.error('‚ùå L·ªói khi seed d·ªØ li·ªáu t√†u Metro:', error);
    throw error;
  }
};

module.exports = { seedTrains, trainsData }; 