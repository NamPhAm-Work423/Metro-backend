const { Trip, Route, Train } = require('../models/index.model');

// H√†m t√≠nh to√°n th·ªùi gian ƒë·∫øn d·ª±a tr√™n th·ªùi gian kh·ªüi h√†nh v√† duration
function calculateArrivalTime(departureTime, durationMinutes) {
  const [hours, minutes] = departureTime.split(':').map(Number);
  const totalMinutes = hours * 60 + minutes + durationMinutes;
  const arrivalHours = Math.floor(totalMinutes / 60) % 24;
  const arrivalMins = totalMinutes % 60;
  return `${arrivalHours.toString().padStart(2, '0')}:${arrivalMins.toString().padStart(2, '0')}:00`;
}

// H√†m t·∫°o l·ªãch tr√¨nh theo t·∫ßn su·∫•t (m·ªói X ph√∫t)
function generateSchedule(startTime, endTime, intervalMinutes, durationMinutes) {
  const trips = [];
  const [startHour, startMin] = startTime.split(':').map(Number);
  const [endHour, endMin] = endTime.split(':').map(Number);
  
  let currentTime = startHour * 60 + startMin; // Convert to minutes
  const endTimeMinutes = endHour * 60 + endMin;
  
  while (currentTime < endTimeMinutes) {
    const hours = Math.floor(currentTime / 60);
    const minutes = currentTime % 60;
    const departureTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`;
    const arrivalTime = calculateArrivalTime(departureTime, durationMinutes);
    
    trips.push({
      departureTime,
      arrivalTime
    });
    
    currentTime += intervalMinutes;
  }
  
  return trips;
}

// C·∫•u h√¨nh l·ªãch tr√¨nh cho t·ª´ng tuy·∫øn
const routeScheduleConfig = {
  'tuyen-metro-so-1-ben-thanh-suoi-tien': {
    duration: 36, // ph√∫t
    weekdayInterval: 6, // m·ªói 6 ph√∫t (gi·ªù cao ƒëi·ªÉm)
    weekendInterval: 10, // m·ªói 10 ph√∫t (cu·ªëi tu·∫ßn)
    rushHourInterval: 4, // m·ªói 4 ph√∫t (6-9h, 17-20h)
    operatingHours: { start: '05:00', end: '23:00' }
  },
  'tuyen-metro-so-2-bx-an-suong-moi-cat-lai': {
    duration: 90, // ph√∫t  
    weekdayInterval: 8, // m·ªói 8 ph√∫t
    weekendInterval: 12, // m·ªói 12 ph√∫t
    rushHourInterval: 6, // m·ªói 6 ph√∫t
    operatingHours: { start: '05:00', end: '23:00' }
  },
  'tuyen-metro-so-3a-bx-mien-tay-moi-ben-thanh': {
    duration: 38, // ph√∫t
    weekdayInterval: 7, // m·ªói 7 ph√∫t
    weekendInterval: 10, // m·ªói 10 ph√∫t
    rushHourInterval: 5, // m·ªói 5 ph√∫t
    operatingHours: { start: '05:00', end: '23:00' }
  },
  'tuyen-metro-so-3b-cong-hoa-ga-di-an': {
    duration: 25, // ph√∫t
    weekdayInterval: 10, // m·ªói 10 ph√∫t (tuy·∫øn ng·∫Øn)
    weekendInterval: 15, // m·ªói 15 ph√∫t
    rushHourInterval: 8, // m·ªói 8 ph√∫t
    operatingHours: { start: '05:30', end: '22:30' }
  },
  'tuyen-metro-so-4-thuan-an-nha-be': {
    duration: 70, // ph√∫t
    weekdayInterval: 8, // m·ªói 8 ph√∫t
    weekendInterval: 12, // m·ªói 12 ph√∫t
    rushHourInterval: 6, // m·ªói 6 ph√∫t
    operatingHours: { start: '05:00', end: '23:00' }
  },
  'tuyen-metro-so-5-bx-can-giuoc-cau-sai-gon': {
    duration: 45, // ph√∫t
    weekdayInterval: 10, // m·ªói 10 ph√∫t
    weekendInterval: 15, // m·ªói 15 ph√∫t
    rushHourInterval: 8, // m·ªói 8 ph√∫t
    operatingHours: { start: '05:00', end: '22:30' }
  },
  'tuyen-metro-so-6-quoc-lo-1a-cong-hoa': {
    duration: 15, // ph√∫t (tuy·∫øn ng·∫Øn nh·∫•t)
    weekdayInterval: 8, // m·ªói 8 ph√∫t
    weekendInterval: 12, // m·ªói 12 ph√∫t
    rushHourInterval: 6, // m·ªói 6 ph√∫t
    operatingHours: { start: '05:30', end: '22:30' }
  }
};

const seedTrips = async () => {
  try {
    console.log('üöá B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu trips (l·ªãch tr√¨nh) Metro TPHCM...');
    
    // X√≥a d·ªØ li·ªáu trips c≈©
    await Trip.destroy({ where: {} });
    
    // L·∫•y t·∫•t c·∫£ routes v√† trains
    const routes = await Route.findAll();
    const trains = await Train.findAll({ where: { status: 'active' } });
    
    const routeMap = {};
    routes.forEach(route => {
      routeMap[route.routeId] = route;
    });
    
    const trainsByRoute = {};
    trains.forEach(train => {
      if (!trainsByRoute[train.routeId]) {
        trainsByRoute[train.routeId] = [];
      }
      trainsByRoute[train.routeId].push(train);
    });
    
    console.log('üìã T·∫°o l·ªãch tr√¨nh cho t·ª´ng tuy·∫øn...\n');
    
    const allTrips = [];
    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    
    // T·∫°o trips cho t·ª´ng route
    for (const routeId of Object.keys(routeScheduleConfig)) {
      const config = routeScheduleConfig[routeId];
      const routeTrains = trainsByRoute[routeId] || [];
      
      if (routeTrains.length === 0) {
        console.log(`‚ö†Ô∏è  Kh√¥ng c√≥ t√†u active cho tuy·∫øn ${routeId}`);
        continue;
      }
      
      console.log(`üöÑ T·∫°o l·ªãch tr√¨nh cho ${routeId}:`);
      console.log(`   üìä S·ªë t√†u kh·∫£ d·ª•ng: ${routeTrains.length}`);
      
      // T·∫°o l·ªãch tr√¨nh cho t·ª´ng ng√†y trong tu·∫ßn
      for (const dayOfWeek of daysOfWeek) {
        const isWeekend = dayOfWeek === 'Saturday' || dayOfWeek === 'Sunday';
        
        // T·∫°o l·ªãch tr√¨nh cho gi·ªù b√¨nh th∆∞·ªùng
        const normalHourTrips = generateSchedule(
          config.operatingHours.start,
          config.operatingHours.end,
          isWeekend ? config.weekendInterval : config.weekdayInterval,
          config.duration
        );
        
        // T·∫°o l·ªãch tr√¨nh gi·ªù cao ƒëi·ªÉm (ch·ªâ cho ng√†y th∆∞·ªùng)
        let rushHourTrips = [];
        if (!isWeekend) {
          // Gi·ªù cao ƒëi·ªÉm s√°ng: 6:00-9:00
          const morningRushTrips = generateSchedule(
            '06:00',
            '09:00',
            config.rushHourInterval,
            config.duration
          );
          
          // Gi·ªù cao ƒëi·ªÉm chi·ªÅu: 17:00-20:00  
          const eveningRushTrips = generateSchedule(
            '17:00',
            '20:00',
            config.rushHourInterval,
            config.duration
          );
          
          rushHourTrips = [...morningRushTrips, ...eveningRushTrips];
        }
        
        // K·∫øt h·ª£p t·∫•t c·∫£ trips v√† lo·∫°i b·ªè duplicate
        const allDayTrips = [...normalHourTrips, ...rushHourTrips];
        const uniqueTrips = allDayTrips.filter((trip, index, self) =>
          index === self.findIndex(t => t.departureTime === trip.departureTime)
        );
        
        // S·∫Øp x·∫øp theo th·ªùi gian
        uniqueTrips.sort((a, b) => a.departureTime.localeCompare(b.departureTime));
        
        // Ph√¢n chia trips cho c√°c t√†u
        let trainIndex = 0;
        for (const trip of uniqueTrips) {
          const assignedTrain = routeTrains[trainIndex % routeTrains.length];
          
          allTrips.push({
            serviceDate: new Date('2024-12-20'), // Ng√†y m·∫´u
            routeId: routeId,
            trainId: assignedTrain.trainId,
            departureTime: trip.departureTime,
            arrivalTime: trip.arrivalTime,
            dayOfWeek: dayOfWeek,
            isActive: true
          });
          
          trainIndex++;
        }
        
        console.log(`   üìÖ ${dayOfWeek}: ${uniqueTrips.length} chuy·∫øn`);
      }
      
      console.log(''); // D√≤ng tr·ªëng
    }
    
    // T·∫°o trips trong database
    console.log('üíæ L∆∞u trips v√†o database...');
    const trips = await Trip.bulkCreate(allTrips);
    
    console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ${trips.length} trips (l·ªãch tr√¨nh)`);
    
    // Th·ªëng k√™ chi ti·∫øt
    const tripsByRoute = trips.reduce((acc, trip) => {
      if (!acc[trip.routeId]) {
        acc[trip.routeId] = [];
      }
      acc[trip.routeId].push(trip);
      return acc;
    }, {});
    
    console.log('\nüìä Th·ªëng k√™ trips theo tuy·∫øn:');
    Object.keys(tripsByRoute).forEach(routeId => {
      const routeTrips = tripsByRoute[routeId];
      const uniqueDays = [...new Set(routeTrips.map(t => t.dayOfWeek))];
      const avgTripsPerDay = Math.round(routeTrips.length / uniqueDays.length);
      const routeName = routeId.replace(/-/g, ' ').replace(/tuyen metro so /g, 'Tuy·∫øn ').toUpperCase();
      
      console.log(`   üöá ${routeName}:`);
      console.log(`      üìà T·ªïng: ${routeTrips.length} trips`);
      console.log(`      üìÖ Trung b√¨nh: ${avgTripsPerDay} trips/ng√†y`);
    });
    
    // Th·ªëng k√™ theo ng√†y trong tu·∫ßn
    const tripsByDay = trips.reduce((acc, trip) => {
      if (!acc[trip.dayOfWeek]) {
        acc[trip.dayOfWeek] = [];
      }
      acc[trip.dayOfWeek].push(trip);
      return acc;
    }, {});
    
    console.log('\nüìÖ Th·ªëng k√™ trips theo ng√†y:');
    daysOfWeek.forEach(day => {
      const dayTrips = tripsByDay[day] || [];
      console.log(`   ${day}: ${dayTrips.length} trips`);
    });
    
    // Th·ªëng k√™ gi·ªù cao ƒëi·ªÉm vs b√¨nh th∆∞·ªùng
    const morningRushTrips = trips.filter(trip => {
      const hour = parseInt(trip.departureTime.split(':')[0]);
      return hour >= 6 && hour <= 9 && !['Saturday', 'Sunday'].includes(trip.dayOfWeek);
    });
    
    const eveningRushTrips = trips.filter(trip => {
      const hour = parseInt(trip.departureTime.split(':')[0]);
      return hour >= 17 && hour <= 20 && !['Saturday', 'Sunday'].includes(trip.dayOfWeek);
    });
    
    console.log('\n‚è∞ Th·ªëng k√™ gi·ªù cao ƒëi·ªÉm:');
    console.log(`   üåÖ Gi·ªù cao ƒëi·ªÉm s√°ng (6-9h): ${morningRushTrips.length} trips`);
    console.log(`   üåÜ Gi·ªù cao ƒëi·ªÉm chi·ªÅu (17-20h): ${eveningRushTrips.length} trips`);
    console.log(`   üìä T·ªïng gi·ªù cao ƒëi·ªÉm: ${morningRushTrips.length + eveningRushTrips.length} trips`);
    
    return trips;
  } catch (error) {
    console.error('‚ùå L·ªói khi seed d·ªØ li·ªáu trips Metro:', error);
    throw error;
  }
};

module.exports = { seedTrips };
