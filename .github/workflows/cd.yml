name: CD
run-name: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.display_title) || (github.event_name == 'workflow_dispatch' && format('Deploy {0}', inputs.tag || github.ref_name || github.sha)) || format('Deploy {0}', github.ref_name || github.sha) }}

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy (semver vX.Y.Z or short SHA). Leave empty to use computed tag
        required: false

permissions:
  contents: read
  packages: read

env:
  DEFAULT_VPS_PATH: /opt/metro
  # Image prefix 
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  # Host cho docker login
  GHCR_HOST: ghcr.io

jobs:
  deploy-local:
    name: Local deploy on self-hosted runner
    runs-on: [self-hosted]
    timeout-minutes: 30
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    concurrency:
      group: deploy-selfhosted-${{ github.ref_name }}
      cancel-in-progress: false

    steps:
      - name: Clean workspace before checkout
        shell: bash
        run: |
          chmod -R u+w "$GITHUB_WORKSPACE" 2>/dev/null || true
          rm -rf "$GITHUB_WORKSPACE/nginx/certs/" 2>/dev/null || true
          rm -rf "$GITHUB_WORKSPACE/.git/" 2>/dev/null || true
          if [ -d "$GITHUB_WORKSPACE/nginx/certs/" ]; then sudo rm -rf "$GITHUB_WORKSPACE/nginx/certs/"; fi
          if [ -d "$GITHUB_WORKSPACE/.git/" ]; then sudo rm -rf "$GITHUB_WORKSPACE/.git/"; fi
          sudo chown -R "$(whoami):$(whoami)" "$GITHUB_WORKSPACE" 2>/dev/null || true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Resolve deploy tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ inputs.tag || '' }}" ]]; then
            echo "value=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            SHA="${{ github.event.workflow_run.head_sha }}"
            echo "value=${SHA:0:7}" >> "$GITHUB_OUTPUT"
          else
            echo "value=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi
          echo "resolved_tag=$(cat $GITHUB_OUTPUT | sed -n 's/^value=//p')" || true

      - name: Docker login GHCR
        env:
          GHCR_HOST: ${{ env.GHCR_HOST }}
          REGISTRY_USER: ${{ secrets.GHCR_USERNAME || github.actor }}
          REGISTRY_TOKEN: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          echo "$REGISTRY_TOKEN" | docker login "$GHCR_HOST" -u "$REGISTRY_USER" --password-stdin

      - name: Verify images exist for tag
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_TAG: ${{ steps.tag.outputs.value }}
        shell: bash
        run: |
          set -euo pipefail
          services=(
            api-gateway auth-service payment-service public-service ticket-service
            transport-service user-service report-service management-service
            control-service notification-service webhook
          )
          missing=()
          for s in "${services[@]}"; do
            ref="$REGISTRY/metro-$s:$IMAGE_TAG"
            if ! docker manifest inspect "$ref" >/dev/null 2>&1; then
              missing+=("$ref")
            fi
          done
          if (( ${#missing[@]} > 0 )); then
            echo "Missing images for tag '$IMAGE_TAG':" >&2
            printf ' - %s\n' "${missing[@]}" >&2
            exit 1
          fi
          echo "All images for '$IMAGE_TAG' are present."

      - name: Compose pull & up
        env:
          # Xuất cả TAG & IMAGE_TAG cho compose expand
          TAG: ${{ steps.tag.outputs.value }}
          IMAGE_TAG: ${{ steps.tag.outputs.value }}
          VPS_PATH: ${{ secrets.VPS_PATH || env.DEFAULT_VPS_PATH }}
          COMPOSE_PROFILES: nginx,admin-tools
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_DIR="$GITHUB_WORKSPACE"
          if [ ! -f "$DEPLOY_DIR/docker-compose.prod.yml" ] \
             && [ ! -f "$DEPLOY_DIR/compose.prod.yml" ] \
             && [ ! -f "$DEPLOY_DIR/docker-compose.yml" ] \
             && [ ! -f "$DEPLOY_DIR/compose.yml" ]; then
            DEPLOY_DIR="${VPS_PATH:-/opt/metro}"
          fi
          echo "Using deploy directory: $DEPLOY_DIR"
          cd "$DEPLOY_DIR"

          docker compose version >/dev/null

          if   [ -f docker-compose.prod.yml ]; then COMPOSE_FILES="-f docker-compose.prod.yml"
          elif [ -f compose.prod.yml ];        then COMPOSE_FILES="-f compose.prod.yml"
          elif [ -f docker-compose.yml ];      then COMPOSE_FILES="-f docker-compose.yml"
          elif [ -f compose.yml ];             then COMPOSE_FILES="-f compose.yml"
          else echo "No compose file found in $DEPLOY_DIR" >&2; exit 1; fi

          echo "Using tag: $TAG"
          echo "Using profiles: $COMPOSE_PROFILES"

          # Kéo image trước (không fail pipeline nếu có service optional)
          docker compose $COMPOSE_FILES pull || true

          # Up theo profiles (nginx + admin-tools), remove orphan để dọn service cũ
          docker compose $COMPOSE_FILES --profile nginx --profile admin-tools up -d --remove-orphans

          docker image prune -f || true
          docker compose $COMPOSE_FILES ps
