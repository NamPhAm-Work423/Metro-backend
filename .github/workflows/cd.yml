name: CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Image tag (semver vX.Y.Z or short SHA)"
        required: true
  release:
    types: [published]
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  CHART_PATH: deploy/helm/metro
  NAMESPACE: metro

permissions:
  contents: read
  packages: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: cd-prod-${{ github.workflow }}-${{ matrix.name }}-${{ github.ref_name }}
      cancel-in-progress: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: api-gateway
            repo: metro-api-gateway
            values: api-gateway.yaml
          - name: auth-service
            repo: metro-auth-service
            values: auth-service.yaml
          - name: payment-service
            repo: metro-payment-service
            values: payment-service.yaml
          - name: public-service
            repo: metro-public-service
            values: public-service.yaml
          - name: ticket-service
            repo: metro-ticket-service
            values: ticket-service.yaml
          - name: transport-service
            repo: metro-transport-service
            values: transport-service.yaml
          - name: user-service
            repo: metro-user-service
            values: user-service.yaml
          - name: report-service
            repo: metro-report-service
            values: report-service.yaml
          - name: management-service
            repo: metro-management-service
            values: management-service.yaml

    # no job-level secrets references; will export via a step env

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate to cluster
      - name: Export kubeconfig secret to env
        shell: bash
        env:
          KCFG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [[ -n "${KCFG:-}" ]]; then
            echo "KUBE_CONFIG=$KCFG" >> $GITHUB_ENV
          fi

      - name: Set kubeconfig (if provided)
        uses: ./.github/actions/kubeconfig

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Set REGISTRY env (lowercase owner)
        run: echo "REGISTRY=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Ensure namespace
        run: kubectl create ns $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Resolve version
        id: ver
        run: |
          if [[ "${{ github.event_name }}" == "release" || "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version input
        run: |
          set -euo pipefail
          TAG='${{ steps.ver.outputs.tag }}'
          if [[ -z "$TAG" ]]; then
            echo "Empty tag provided" >&2
            exit 1
          fi
          if [[ ! "$TAG" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ && ! "$TAG" =~ ^[0-9a-fA-F]{7,40}$ ]]; then
            echo "Tag '$TAG' must be semver (vX.Y.Z) or a git SHA" >&2
            exit 1
          fi

      - name: Helm dependency update
        run: |
          set -euo pipefail
          helm dependency update "$CHART_PATH"

      - name: Helm lint
        run: |
          set -euo pipefail
          helm lint "$CHART_PATH" \
            --values "$CHART_PATH/values/${{ matrix.values }}" \
            --set name="${{ matrix.name }}" \
            --set image.repository="$REGISTRY/${{ matrix.repo }}" \
            --set image.tag="${{ steps.ver.outputs.tag }}"

      - name: Deploy service
        run: |
          set -euo pipefail
          # Server-side dry-run validation
          helm template "${{ matrix.name }}" "$CHART_PATH" \
            --namespace "$NAMESPACE" \
            --values "$CHART_PATH/values/${{ matrix.values }}" \
            --set name="${{ matrix.name }}" \
            --set image.repository="$REGISTRY/${{ matrix.repo }}" \
            --set image.tag="${{ steps.ver.outputs.tag }}" \
          | kubectl apply -n "$NAMESPACE" --dry-run=server -f -

          # Atomic deploy with wait and timeout
          helm upgrade --install "${{ matrix.name }}" "$CHART_PATH" \
            --namespace "$NAMESPACE" \
            --values "$CHART_PATH/values/${{ matrix.values }}" \
            --set name="${{ matrix.name }}" \
            --set image.repository="$REGISTRY/${{ matrix.repo }}" \
            --set image.tag="${{ steps.ver.outputs.tag }}" \
            --atomic --wait --timeout 15m --history-max 10

      - name: Post-deploy status
        run: |
          set -euo pipefail
          kubectl get deploy,sts,po,svc -n "$NAMESPACE" -l app.kubernetes.io/instance=${{ matrix.name }} || true


