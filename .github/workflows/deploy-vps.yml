name: Deploy to VPS

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy (semver vX.Y.Z or short SHA). Leave empty to use current context
        required: false

permissions:
  contents: read
  packages: read

env:
  # Lowercased owner for GHCR path
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  # Default remote path; override by setting secret VPS_PATH
  DEFAULT_VPS_PATH: /opt/metro

jobs:
  deploy:
    name: SSH deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: deploy-vps-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v4

      - name: Resolve deploy tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ inputs.tag || '' }}" ]]; then
            TAG_INPUT="${{ inputs.tag }}"
            echo "value=$TAG_INPUT" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "value=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            echo "value=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "value=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "value=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Validate tag format
        shell: bash
        run: |
          set -euo pipefail
          TAG='${{ steps.tag.outputs.value }}'
          if [[ -z "$TAG" ]]; then
            echo "Empty tag computed" >&2; exit 1
          fi
          if [[ ! "$TAG" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ && ! "$TAG" =~ ^[0-9a-fA-F]{7,40}$ ]]; then
            echo "Tag '$TAG' must be semver (vX.Y.Z) or a git SHA" >&2; exit 1
          fi

      - name: Normalize registry owner to lowercase
        id: reg
        shell: bash
        run: |
          echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT
          echo "registry=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT

      - name: Show deploy plan
        run: |
          echo "Deploying tag '${{ steps.tag.outputs.value }}' to VPS '${{ secrets.VPS_HOST }}' as user '${{ secrets.VPS_USER }}'"
          echo "Registry: ${{ steps.reg.outputs.registry }}"
          echo "Remote path: ${{ secrets.VPS_PATH || env.DEFAULT_VPS_PATH }}"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          REGISTRY: ${{ steps.reg.outputs.registry }}
          REGISTRY_USER: ${{ secrets.GHCR_USERNAME || github.actor }}
          REGISTRY_TOKEN: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}
          DEPLOY_TAG: ${{ steps.tag.outputs.value }}
          VPS_PATH: ${{ secrets.VPS_PATH || env.DEFAULT_VPS_PATH }}
        with:
          host: ${{ secrets.VPS_HOST_V4 || secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          port: ${{ secrets.VPS_PORT || 2222 }}
          fingerprint: ${{ secrets.VPS_FINGERPRINT }}
          envs: REGISTRY,REGISTRY_USER,REGISTRY_TOKEN,DEPLOY_TAG,VPS_PATH
          script: |
            set -euo pipefail
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker is not installed on remote host" >&2; exit 1
            fi
            DOCKER_COMPOSE="docker compose"
            if ! $DOCKER_COMPOSE version >/dev/null 2>&1; then
              echo "docker compose v2 is required on remote host" >&2; exit 1
            fi

            mkdir -p "$VPS_PATH"
            cd "$VPS_PATH"

            echo "Logging in to GHCR (if private images)"
            set +e
            echo "$REGISTRY_TOKEN" | docker login "$REGISTRY" -u "$REGISTRY_USER" --password-stdin
            LOGIN_RC=$?
            set -e
            if [ $LOGIN_RC -ne 0 ]; then
              echo "GHCR login failed (continuing; ensure images are public or credentials are correct)" >&2
            fi

            echo "Using tag: $DEPLOY_TAG"
            export IMAGE_TAG="$DEPLOY_TAG"

            # If a prod compose file exists, prefer it; otherwise use default
            COMPOSE_FILES=""
            if [ -f docker-compose.prod.yml ]; then
              COMPOSE_FILES="-f docker-compose.prod.yml"
            elif [ -f compose.prod.yml ]; then
              COMPOSE_FILES="-f compose.prod.yml"
            elif [ -f docker-compose.yml ]; then
              COMPOSE_FILES="-f docker-compose.yml"
            elif [ -f compose.yml ]; then
              COMPOSE_FILES="-f compose.yml"
            else
              echo "No compose file found in $VPS_PATH" >&2; exit 1
            fi

            echo "Pulling images..."
            $DOCKER_COMPOSE $COMPOSE_FILES pull || true

            echo "Deploying containers..."
            set +e
            $DOCKER_COMPOSE $COMPOSE_FILES up -d
            RC=$?
            set -e
            if [ $RC -ne 0 ]; then
              echo "Compose up failed; showing recent logs" >&2
              $DOCKER_COMPOSE $COMPOSE_FILES logs --no-color --tail=200 || true
              exit $RC
            fi

            echo "Pruning dangling images"
            docker image prune -f || true

            echo "Deployment complete. Current status:"
            $DOCKER_COMPOSE $COMPOSE_FILES ps


