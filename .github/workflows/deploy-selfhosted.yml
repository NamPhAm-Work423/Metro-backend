name: Deploy VPS

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:
    inputs:
      tag:
        description: Image tag to deploy (semver vX.Y.Z or short SHA). Leave empty to use computed tag
        required: false

permissions:
  contents: read
  packages: read

env:
  DEFAULT_VPS_PATH: /opt/metro

jobs:
  deploy-local:
    name: Local deploy on self-hosted runner
    runs-on: self-hosted
    timeout-minutes: 30
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    concurrency:
      group: deploy-selfhosted-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Clean workspace before checkout
        shell: bash
        run: |
          # Fix ownership of all files in workspace
          sudo chown -R nampham423:nampham423 $GITHUB_WORKSPACE || true
          # Make files writable for deletion
          sudo chmod -R u+w $GITHUB_WORKSPACE || true
          # Force remove problematic files
          sudo rm -rf $GITHUB_WORKSPACE/nginx/certs/ || true
          sudo rm -rf $GITHUB_WORKSPACE/.git/ || true
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false
      - name: Resolve deploy tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ inputs.tag || '' }}" ]]; then
            echo "value=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            SHA="${{ github.event.workflow_run.head_sha }}"
            echo "value=${SHA:0:7}" >> $GITHUB_OUTPUT
          else
            echo "value=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Set REGISTRY env (lowercase owner)
        run: echo "REGISTRY=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Docker login GHCR (if private)
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REGISTRY_USER: ${{ secrets.GHCR_USERNAME || github.actor }}
          REGISTRY_TOKEN: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set +e
          echo "$REGISTRY_TOKEN" | docker login "$REGISTRY" -u "$REGISTRY_USER" --password-stdin
          true

      - name: Verify images exist for tag
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_TAG: ${{ steps.tag.outputs.value }}
        shell: bash
        run: |
          set -euo pipefail
          services=(
            api-gateway auth-service payment-service public-service ticket-service 
            transport-service user-service report-service management-service control-service
          )
          missing=()
          for s in "${services[@]}"; do
            if ! docker manifest inspect "$REGISTRY/metro-$s:$IMAGE_TAG" >/dev/null 2>&1; then
              missing+=("$REGISTRY/metro-$s:$IMAGE_TAG")
            fi
          done
          if (( ${#missing[@]} > 0 )); then
            echo "Missing images for tag '$IMAGE_TAG':" >&2
            printf ' - %s\n' "${missing[@]}" >&2
            exit 1
          fi

      - name: Compose pull & up
        env:
          IMAGE_TAG: ${{ steps.tag.outputs.value }}
          VPS_PATH: ${{ secrets.VPS_PATH || env.DEFAULT_VPS_PATH }}
        shell: bash
        run: |
          set -euo pipefail
          # Choose directory containing compose file: prefer repo checkout, fallback to VPS_PATH
          DEPLOY_DIR="$GITHUB_WORKSPACE"
          if [ ! -f "$DEPLOY_DIR/docker-compose.prod.yml" ] \
             && [ ! -f "$DEPLOY_DIR/compose.prod.yml" ] \
             && [ ! -f "$DEPLOY_DIR/docker-compose.yml" ] \
             && [ ! -f "$DEPLOY_DIR/compose.yml" ]; then
            DEPLOY_DIR="${VPS_PATH:-/opt/metro}"
          fi
          echo "Using deploy directory: $DEPLOY_DIR"
          cd "$DEPLOY_DIR"
          DOCKER_COMPOSE="docker compose"
          $DOCKER_COMPOSE version >/dev/null
          COMPOSE_FILES=""
          if [ -f docker-compose.prod.yml ]; then
            COMPOSE_FILES="-f docker-compose.prod.yml"
          elif [ -f compose.prod.yml ]; then
            COMPOSE_FILES="-f compose.prod.yml"
          elif [ -f docker-compose.yml ]; then
            COMPOSE_FILES="-f docker-compose.yml"
          elif [ -f compose.yml ]; then
            COMPOSE_FILES="-f compose.yml"
          else
            echo "No compose file found in $VPS_PATH" >&2; exit 1
          fi
          echo "Using tag: $IMAGE_TAG"
          $DOCKER_COMPOSE $COMPOSE_FILES pull || true
          $DOCKER_COMPOSE $COMPOSE_FILES up -d
          docker image prune -f || true
          $DOCKER_COMPOSE $COMPOSE_FILES ps


