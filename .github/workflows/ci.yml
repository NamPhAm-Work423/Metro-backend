name: CI

on:
  pull_request:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Setup and calculate metadata
  setup:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.vars.outputs.short_sha }}
      is_release: ${{ steps.vars.outputs.is_release }}
      release_tag: ${{ steps.vars.outputs.release_tag }}
      registry: ${{ steps.vars.outputs.registry }}
      node_services: ${{ steps.services.outputs.node_services }}
      python_services: ${{ steps.services.outputs.python_services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute variables
        id: vars
        run: |
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "registry=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate service matrices
        id: services
        run: |
          # Node.js services
          node_services='[
            {"name":"api-gateway","path":"api-gateway"},
            {"name":"auth-service","path":"auth-service"},
            {"name":"payment-service","path":"payment-service"},
            {"name":"public-service","path":"public-service"},
            {"name":"ticket-service","path":"ticket-service"},
            {"name":"transport-service","path":"transport-service"},
            {"name":"user-service","path":"user-service"},
            {"name":"notification-service","path":"notification-service"},
            {"name":"scheduler-service","path":"scheduler-service"},
            {"name":"webhook","path":"webhook"}
          ]'
          
          # Python services
          python_services='[
            {"name":"control-service","path":"control-service"},
            {"name":"report-service","path":"report-service"},
            {"name":"management-service","path":"management-service"},
            {"name":"healthcheck","path":"deploy/healthcheck"}
          ]'
          
          echo "node_services=$(echo "$node_services" | jq -c .)" >> $GITHUB_OUTPUT
          echo "python_services=$(echo "$python_services" | jq -c .)" >> $GITHUB_OUTPUT

  # Job 2: Test Node.js services parallel
  test-node:
    needs: setup
    runs-on: ubuntu-latest
    if: fromJson(needs.setup.outputs.node_services)[0] != null
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.node_services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect npm lockfile
        id: detect_lockfile
        run: |
          if [ -f "${{ matrix.service.path }}/package-lock.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure npm cache directory
        id: ensure_npm_cache_dir
        shell: bash
        run: |
          NPM_CACHE_DIR=$(npm config get cache)
          mkdir -p "$NPM_CACHE_DIR"
          echo "npm_cache_dir=$NPM_CACHE_DIR" >> $GITHUB_OUTPUT

      - name: Cache npm
        if: steps.detect_lockfile.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ steps.ensure_npm_cache_dir.outputs.npm_cache_dir }}
          key: ${{ runner.os }}-node-${{ matrix.service.name }}-${{ hashFiles(format('{0}/package-lock.json', matrix.service.path)) }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.service.name }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ matrix.service.path }}
        run: |
          npm ci --no-audit --no-fund || (
            echo "npm ci failed, syncing lockfile..." && \
            npm install --package-lock-only --no-audit --no-fund && \
            npm ci --no-audit --no-fund
          )

      - name: Set ENFORCE_COVERAGE
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" == refs/heads/main ]]; then
            echo "ENFORCE_COVERAGE=true" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "ENFORCE_COVERAGE=true" >> $GITHUB_ENV
          else
            echo "ENFORCE_COVERAGE=false" >> $GITHUB_ENV
          fi

      - name: Run tests
        working-directory: ${{ matrix.service.path }}
        run: |
          if npm run | grep -q "test"; then
            npm test --if-present
          fi
          if npm run | grep -q "test:coverage" && [[ "$ENFORCE_COVERAGE" == "true" ]]; then
            npm run test:coverage
          fi

  # Job 3: Test Python services parallel
  test-python:
    needs: setup
    runs-on: ubuntu-latest
    if: fromJson(needs.setup.outputs.python_services)[0] != null
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.setup.outputs.python_services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service.name }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.service.path)) }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service.name }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ${{ matrix.service.path }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run tests
        working-directory: ${{ matrix.service.path }}
        run: |
          if [ -d tests ]; then pytest -q || true; fi

  # Job 4: Build and push images parallel
  build-push:
    needs: [setup, test-node, test-python]
    if: always() && needs.setup.result == 'success' && (needs.test-node.result == 'success' || needs.test-node.result == 'skipped') && (needs.test-python.result == 'success' || needs.test-python.result == 'skipped')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        include:
          - { name: api-gateway,         path: api-gateway }
          - { name: auth-service,        path: auth-service }
          - { name: payment-service,     path: payment-service }
          - { name: public-service,      path: public-service }
          - { name: ticket-service,      path: ticket-service }
          - { name: transport-service,   path: transport-service }
          - { name: control-service,     path: control-service }
          - { name: user-service,        path: user-service }
          - { name: report-service,      path: report-service }
          - { name: notification-service,path: notification-service }
          - { name: scheduler-service,   path: scheduler-service }
          - { name: management-service,  path: management-service }
          - { name: webhook,             path: webhook }
          - { name: healthcheck,         path: deploy/healthcheck }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image (SHA tag)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          cache-from: type=gha,scope=metro-${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=metro-${{ matrix.name }}
          tags: |
            ${{ needs.setup.outputs.registry }}/metro-${{ matrix.name }}:${{ needs.setup.outputs.short_sha }}
          build-args: |
            APP_VERSION=${{ needs.setup.outputs.short_sha }}

      - name: Also push release semver tag
        if: needs.setup.outputs.is_release == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          push: true
          cache-from: type=gha,scope=metro-${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=metro-${{ matrix.name }}
          tags: |
            ${{ needs.setup.outputs.registry }}/metro-${{ matrix.name }}:${{ needs.setup.outputs.release_tag }}
          build-args: |
            APP_VERSION=${{ needs.setup.outputs.release_tag }}

  # Job 5: Security scan parallel (only for release)
  security-scan:
    needs: [setup, build-push]
    if: needs.setup.outputs.is_release == 'true' && needs.build-push.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        service: [
          api-gateway, auth-service, payment-service, public-service,
          ticket-service, transport-service, control-service, user-service,
          report-service, notification-service, scheduler-service,
          management-service, webhook, healthcheck
        ]
    env:
      ENABLE_SARIF_UPLOAD: 'false'
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Trivy cache
        run: |
          mkdir -p "$HOME/.cache/trivy"
          echo "TRIVY_CACHE_DIR=$HOME/.cache/trivy" >> $GITHUB_ENV

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: ${{ runner.os }}-trivy-db-${{ matrix.service }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-${{ matrix.service }}-
            ${{ runner.os }}-trivy-db-

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin v0.53.0

      - name: Pull and scan image
        run: |
          IMG="${{ needs.setup.outputs.registry }}/metro-${{ matrix.service }}:${{ needs.setup.outputs.short_sha }}"
          docker pull "$IMG"
          
          trivy image \
            --format sarif \
            --output "trivy-${{ matrix.service }}.sarif" \
            --vuln-type os,library \
            --timeout 5m \
            --cache-dir "${{ env.TRIVY_CACHE_DIR }}" \
            "$IMG" || true

      - name: Upload SARIF
        if: env.ENABLE_SARIF_UPLOAD == 'true'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: trivy-${{ matrix.service }}.sarif

  # Job 6: Verify images (parallel by group)
  verify-images:
    if: github.event_name == 'push'
    needs: [setup, build-push]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        service: [
          api-gateway, auth-service, payment-service, public-service,
          ticket-service, transport-service, control-service, user-service,
          report-service, notification-service, scheduler-service,
          management-service, webhook
        ]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image exists
        run: |
          REF="${{ needs.setup.outputs.registry }}/metro-${{ matrix.service }}:${{ needs.setup.outputs.short_sha }}"
          echo "Checking $REF"
          if ! docker manifest inspect "$REF" > /dev/null 2>&1; then
            echo "Missing image: $REF"
            exit 1
          fi
          echo "OK: $REF"