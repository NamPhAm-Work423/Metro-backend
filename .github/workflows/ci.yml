name: CI

on:
  pull_request:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  build-test-scan-push:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io/placeholder
      ENABLE_SARIF_UPLOAD: 'false'
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: api-gateway
            path: api-gateway
            dockerfile: Dockerfile
            runtime: node
          - name: auth-service
            path: auth-service
            dockerfile: Dockerfile
            runtime: node
          - name: payment-service
            path: payment-service
            dockerfile: Dockerfile
            runtime: node
          - name: public-service
            path: public-service
            dockerfile: Dockerfile
            runtime: node
          - name: ticket-service
            path: ticket-service
            dockerfile: Dockerfile
            runtime: node
          - name: transport-service
            path: transport-service
            dockerfile: Dockerfile
            runtime: node
          - name: user-service
            path: user-service
            dockerfile: Dockerfile
            runtime: node
          - name: report-service
            path: report-service
            dockerfile: Dockerfile
            runtime: python
          - name: management-service
            path: management-service
            dockerfile: Dockerfile
            runtime: python

    # REGISTRY is set later via $GITHUB_ENV to ensure lowercase owner

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        if: matrix.runtime == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect npm lockfile
        id: detect_lockfile
        if: ${{ matrix.runtime == 'node' }}
        run: |
          if [ -f "${{ matrix.path }}/package-lock.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure npm cache directory
        id: ensure_npm_cache_dir
        if: ${{ matrix.runtime == 'node' }}
        shell: bash
        run: |
          NPM_CACHE_DIR=$(npm config get cache)
          mkdir -p "$NPM_CACHE_DIR"
          echo "npm_cache_dir=$NPM_CACHE_DIR" >> $GITHUB_OUTPUT

      - name: Cache npm (when lockfile exists)
        if: ${{ matrix.runtime == 'node' && steps.detect_lockfile.outputs.exists == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.ensure_npm_cache_dir.outputs.npm_cache_dir }}
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', matrix.path)) }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Python
        if: matrix.runtime == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (Node)
        if: matrix.runtime == 'node'
        working-directory: ${{ matrix.path }}
        run: |
          npm ci --no-audit --no-fund || (
            echo "npm ci failed, syncing lockfile..." && \
            npm install --package-lock-only --no-audit --no-fund && \
            npm ci --no-audit --no-fund
          )

      - name: Set ENFORCE_COVERAGE
        if: matrix.runtime == 'node'
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" == refs/heads/main ]]; then
            echo "ENFORCE_COVERAGE=true" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "ENFORCE_COVERAGE=true" >> $GITHUB_ENV
          else
            echo "ENFORCE_COVERAGE=false" >> $GITHUB_ENV
          fi

      - name: Test (Node)
        if: matrix.runtime == 'node'
        working-directory: ${{ matrix.path }}
        run: npm test --if-present

      - name: Install deps (Python)
        if: matrix.runtime == 'python'
        working-directory: ${{ matrix.path }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Test (Python)
        if: matrix.runtime == 'python'
        working-directory: ${{ matrix.path }}
        run: |
          if [ -d tests ]; then pytest -q || true; fi

      - name: Compute tags
        id: vars
        run: |
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "release_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set REGISTRY env (lowercase owner)
        run: echo "REGISTRY=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build and push image (SHA tag)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/metro-${{ matrix.name }}:${{ steps.vars.outputs.short_sha }}
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.short_sha }}

      - name: Also push release semver tag when building a tag
        if: steps.vars.outputs.is_release == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/${{ matrix.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/metro-${{ matrix.name }}:${{ steps.vars.outputs.release_tag }}
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.release_tag }}

      - name: Pull image for scan (non-PR)
        if: github.event_name != 'pull_request'
        run: docker pull "$REGISTRY/metro-${{ matrix.name }}:${{ steps.vars.outputs.short_sha }}"

      - name: Trivy scan (SHA image)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/metro-${{ matrix.name }}:${{ steps.vars.outputs.short_sha }}
          format: sarif
          output: trivy-${{ matrix.name }}.sarif
          vuln-type: 'os,library'
          exit-code: '0'
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SARIF
        if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) && env.ENABLE_SARIF_UPLOAD == 'true'
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: trivy-${{ matrix.name }}.sarif

      - name: Attach SARIF as artifact (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ matrix.name }}-sarif
          path: trivy-${{ matrix.name }}.sarif


